{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/adebayomoyin/myproject/blob/main/Untitled2.ipynb%20final%20project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cnl5Xqt4DuNi"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gmDPwZscZ1yL"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Loading data into python environment\n",
        "fraud_df = pd.read_csv(\"/content/fraudDetection.csv\")\n",
        "fraud_df.shape"
      ],
      "metadata": {
        "id": "DFcWyC69cMFt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "737b3db7-0132-4483-ab29-ea2ab97d1081"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(16426, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fraud_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zBOkgY_HIpAc",
        "outputId": "18310102-9503-4b65-8fd3-b86321d65f18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(16426, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking information of the dataset\n",
        "fraud_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CesQDRJ-cZ8N",
        "outputId": "5d01b5c3-599a-4682-9da3-b1c1fcb78b7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 16426 entries, 0 to 16425\n",
            "Data columns (total 11 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   step            16426 non-null  int64  \n",
            " 1   type            16426 non-null  object \n",
            " 2   amount          16426 non-null  float64\n",
            " 3   nameOrig        16426 non-null  object \n",
            " 4   oldbalanceOrg   16426 non-null  float64\n",
            " 5   newbalanceOrig  16426 non-null  float64\n",
            " 6   nameDest        16426 non-null  object \n",
            " 7   oldbalanceDest  16426 non-null  float64\n",
            " 8   newbalanceDest  16426 non-null  float64\n",
            " 9   isFraud         16426 non-null  int64  \n",
            " 10  isFlaggedFraud  16426 non-null  int64  \n",
            "dtypes: float64(5), int64(3), object(3)\n",
            "memory usage: 1.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Resize dataset because of the volumne"
      ],
      "metadata": {
        "id": "_6Gqpc44wLCf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the minimum count between fraud and non-fraud transactions\n",
        "min_count = fraud_df['isFraud'].value_counts().min()\n",
        "\n",
        "# (Optional) Convert the target variable to object (string) type if necessary\n",
        "fraud_df['isFraud'] = fraud_df['isFraud'].astype(str)\n",
        "\n",
        "# Pick equal numbers of fraud and non-fraud transactions\n",
        "fraud_df1 = fraud_df[fraud_df['isFraud'] == '1'].sample(n=min_count, random_state=42)\n",
        "fraud_df0 = fraud_df[fraud_df['isFraud'] == '0'].sample(n=min_count, random_state=42)\n",
        "\n",
        "# Combine the balanced samples\n",
        "balance_fraud_df = pd.concat([fraud_df1, fraud_df0]).reset_index(drop=True)\n",
        "\n",
        "#saving dataset\n",
        "balance_fraud_df.to_csv('fraudDetection.csv', index=False)\n",
        "balance_fraud_df.shape"
      ],
      "metadata": {
        "id": "4hZN7BHec_J9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1572c479-f425-4d86-8b52-cc0f64eba9b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(16426, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# EDA"
      ],
      "metadata": {
        "id": "a5ApL-9GwhuP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Account type that is prone to fraud\n",
        "balance_fraud_df.groupby('type')['isFraud'].value_counts().plot(kind='bar',\n",
        "                                                                      title='Transaction type prone to fraud');"
      ],
      "metadata": {
        "id": "7Xb3LFoGqLaM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "outputId": "57268022-28b8-4394-8ce0-49abe8e67c3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Fraudalent cases\n",
        "fraudalent_df = balance_fraud_df[balance_fraud_df['isFraud'] == '1']\n",
        "\n",
        "#Average amount and transfer type of transfer method used for\n",
        "fraudalent_df.groupby('type')['amount'].mean().plot(kind='bar',\n",
        "                                                    title='Average amount of fraudelent cases based on transaction type');"
      ],
      "metadata": {
        "id": "KOgsxeiWsOWm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "outputId": "dab741ae-1e3d-4d6f-fc37-bc1b2328b528"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking for duplicate values\n",
        "balance_fraud_df.duplicated().sum()"
      ],
      "metadata": {
        "id": "ia3uRD_udRVA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa4dbf82-5a39-4bfc-ba18-d8a43e52293e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Descriptive Statistics for categorical variables\n",
        "balance_fraud_df.describe().T"
      ],
      "metadata": {
        "id": "vPto761LdXlJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "27d5d516-7c64-424c-cd55-777bd5088c98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  count          mean           std  min         25%  \\\n",
              "step            16426.0  3.064416e+02  1.933216e+02  1.0    161.0000   \n",
              "amount          16426.0  8.248655e+05  1.862573e+06  0.0  38157.9125   \n",
              "oldbalanceOrg   16426.0  1.242838e+06  3.252860e+06  0.0  10358.2700   \n",
              "newbalanceOrig  16426.0  5.257872e+05  2.505016e+06  0.0      0.0000   \n",
              "oldbalanceDest  16426.0  8.311948e+05  3.484266e+06  0.0      0.0000   \n",
              "newbalanceDest  16426.0  1.260807e+06  3.864760e+06  0.0      0.0000   \n",
              "isFlaggedFraud  16426.0  9.740655e-04  3.119577e-02  0.0      0.0000   \n",
              "\n",
              "                       50%           75%           max  \n",
              "step               283.000  4.100000e+02  7.430000e+02  \n",
              "amount          175267.610  5.404362e+05  3.147911e+07  \n",
              "oldbalanceOrg   121270.875  7.979333e+05  5.958504e+07  \n",
              "newbalanceOrig       0.000  0.000000e+00  4.958504e+07  \n",
              "oldbalanceDest       0.000  5.283537e+05  2.362305e+08  \n",
              "newbalanceDest  129778.205  1.091986e+06  2.367265e+08  \n",
              "isFlaggedFraud       0.000  0.000000e+00  1.000000e+00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0bf01fd1-b1b1-4b27-b55d-ded952672a6d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>step</th>\n",
              "      <td>16426.0</td>\n",
              "      <td>3.064416e+02</td>\n",
              "      <td>1.933216e+02</td>\n",
              "      <td>1.0</td>\n",
              "      <td>161.0000</td>\n",
              "      <td>283.000</td>\n",
              "      <td>4.100000e+02</td>\n",
              "      <td>7.430000e+02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>amount</th>\n",
              "      <td>16426.0</td>\n",
              "      <td>8.248655e+05</td>\n",
              "      <td>1.862573e+06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>38157.9125</td>\n",
              "      <td>175267.610</td>\n",
              "      <td>5.404362e+05</td>\n",
              "      <td>3.147911e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <td>16426.0</td>\n",
              "      <td>1.242838e+06</td>\n",
              "      <td>3.252860e+06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10358.2700</td>\n",
              "      <td>121270.875</td>\n",
              "      <td>7.979333e+05</td>\n",
              "      <td>5.958504e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <td>16426.0</td>\n",
              "      <td>5.257872e+05</td>\n",
              "      <td>2.505016e+06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>4.958504e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <td>16426.0</td>\n",
              "      <td>8.311948e+05</td>\n",
              "      <td>3.484266e+06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>5.283537e+05</td>\n",
              "      <td>2.362305e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>newbalanceDest</th>\n",
              "      <td>16426.0</td>\n",
              "      <td>1.260807e+06</td>\n",
              "      <td>3.864760e+06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>129778.205</td>\n",
              "      <td>1.091986e+06</td>\n",
              "      <td>2.367265e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <td>16426.0</td>\n",
              "      <td>9.740655e-04</td>\n",
              "      <td>3.119577e-02</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0bf01fd1-b1b1-4b27-b55d-ded952672a6d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0bf01fd1-b1b1-4b27-b55d-ded952672a6d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0bf01fd1-b1b1-4b27-b55d-ded952672a6d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b68c1e83-5c1c-479c-a4fc-5c70bac7b626\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b68c1e83-5c1c-479c-a4fc-5c70bac7b626')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b68c1e83-5c1c-479c-a4fc-5c70bac7b626 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"balance_fraud_df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 16426.0,\n        \"max\": 16426.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          16426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 523664.56777565664,\n        \"min\": 0.0009740655059052721,\n        \"max\": 1260806.9666735663,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          306.4415560696457\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1601502.663899029,\n        \"min\": 0.031195768116294757,\n        \"max\": 3864759.8818186102,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          193.3215900060975\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3779644730092273,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14287.818368835995,\n        \"min\": 0.0,\n        \"max\": 38157.9125,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          38157.9125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77749.20980071607,\n        \"min\": 0.0,\n        \"max\": 175267.61,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          175267.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 437692.4312369118,\n        \"min\": 0.0,\n        \"max\": 1091986.21,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          410.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104128635.93844,\n        \"min\": 1.0,\n        \"max\": 236726494.66,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          743.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Droping redundant variables\n",
        "balance_fraud_df.drop(columns=['nameOrig', 'nameDest', 'isFlaggedFraud'], inplace=True)"
      ],
      "metadata": {
        "id": "n9XBKWgedglD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Converting variables to string\n",
        "for col in balance_fraud_df.columns:\n",
        "  if isinstance(fraud_df[col][0], int):\n",
        "    fraud_df[col] = fraud_df[col].astype(str)\n",
        "    fraud_df[col] = fraud_df[col].cat.codes"
      ],
      "metadata": {
        "id": "5HxCf9BqeLtc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#fraudalent transaction based on old balance\n",
        "balance_fraud_df.groupby(['isFraud'])['oldbalanceOrg'].mean().plot(kind='bar',\n",
        "                                                                           title='Average Old Balance before Non-Fraud and Fraud Transaction');"
      ],
      "metadata": {
        "id": "myZU3epr6n0Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "outputId": "54b09117-3994-4f95-97e1-72239bee7cd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Fraud level based on NewBalance\n",
        "balance_fraud_df.groupby(['isFraud'])['newbalanceOrig'].mean().plot(kind='bar',\n",
        "                                                                           title='Average New Balance for Non-Fraud and Fraud Transaction');"
      ],
      "metadata": {
        "id": "FdRCaky7-lxH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "outputId": "4acc036a-6c08-48bd-8520-2d598eccd022"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkIAAAHCCAYAAAAD/6ZFAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABARUlEQVR4nO3dfXyP9f////tO7MTYhrFZlglfM0SGGU1kH6smb0VRkrN3OiFGTt/VnJRIkSiW3jl5a945SdKEt1BJC01OazpxGu/N6TYmG9vx+6PfjrfXNrYJK8/b9XJ5XS5ex/E4juPxOl7H67X76zjjZFmWJQAAAAM5l3UDAAAAZYUgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEXAdt27ZV27Zty7qNP+zixYsaMWKEgoKC5OzsrM6dO5d1S7iCAwcOyMnJSfPmzSvrVmw3y2dBkj7//HM5OTnp888/L+tW/pJ69+6t4ODgsm6jEILQHzRz5kw5OTkpPDy8rFv50wkODpaTk5OeffbZQuPyv1CWLl1aBp0V7uPSR+XKldWyZUslJCSUaW9/BnPmzNFrr72mrl27av78+RoyZMh1XV7btm3l5OSk+++/v9C4/D/yr7/++nXt4XLyeyvqkZKSUiY93Uzyvy+Kepw/f76s2yuxy72Ggo+bNUwdPXpUY8eO1fbt28u6lRJzLesG/uoSEhIUHBysLVu26Oeff1adOnXKuqU/nXfffVejR49WYGBgWbdyWYMGDVLz5s0lSSdPntSiRYv02GOPKT09XQMGDCjj7srO+vXrdcstt+iNN964octNTExUcnKywsLCbuhyi1OjRg1NnDix0PA/87b9V9KkSRM999xzhYa7ubmVQTdXZ8GCBQ7P//Wvf2nt2rWFhtevX/9GtnXDHD16VOPGjVNwcLCaNGniMO7dd99VXl5e2TR2BQShP2D//v36+uuvtWzZMj355JNKSEjQmDFjbmgPeXl5ysnJkYeHxw1dbkk1aNBAe/fu1aRJkzR9+vSybueyIiMj1bVrV/v5008/rdtuu00LFy40OggdO3ZMvr6+12x+Jdleb731Vp05c0bjxo3TihUrrtmyrwUfHx899thjJa7PysqSl5fXdezo5nLLLbeUav2eO3dO5cuXv44dlV7B/r/55hutXbu22Nf1Z3wt11q5cuXKuoUicWjsD0hISFClSpUUExOjrl27OhxKuXDhgipXrqw+ffoUmi4zM1MeHh4aNmyYPSw7O1tjxoxRnTp15O7urqCgII0YMULZ2dkO0zo5OWngwIFKSEhQgwYN5O7urtWrV0uSXn/9dbVq1UpVqlSRp6enwsLCijz09Ntvv2nQoEHy8/NTxYoV1alTJx05ckROTk4aO3asQ+2RI0fUt29f+fv7y93dXQ0aNNCcOXNKvI6Cg4P1+OOP691339XRo0eLrS9ueZZlyc/PT0OHDrWH5eXlydfXVy4uLkpPT7eHv/rqq3J1ddXZs2dL3G8+Nzc3VapUSa6ujr8V5s6dq7vvvlvVqlWTu7u7QkNDNWvWrGLnl5OTo7i4OIWFhcnHx0deXl6KjIzUhg0bHOouPfwze/Zs1a5dW+7u7mrevLm2bt1aaL4pKSl6+OGHVbVqVXl6eqpevXp6/vnnHWqu5j3M72PDhg3as2dPod35WVlZeu655xQUFCR3d3fVq1dPr7/+uizLcpjPlbbXy6lYsaKGDBmiTz75RNu2bbtirSTt27dPDz30kCpXrqzy5curZcuWWrlypUNN/iHQxYsXa8KECapRo4Y8PDzUvn17/fzzz8UuoyR69+6tChUq6JdfftF9992nihUrqkePHpKkjRs36qGHHtKtt95qf76HDBmi3377zWEelzufpqhzK9LT09W7d2/5+PjI19dXvXr1ctj+r+TUqVMaNmyYGjVqpAoVKsjb21v33nuvduzY4VBX2vWWv816enqqRYsW2rhxY4n6KYm2bduqYcOGSk5OVps2bVS+fHn94x//kCR9/PHHiomJUWBgoNzd3VW7dm299NJLys3NdZhHcHCwevfuXeS8C673X3/9VZ07d5aXl5eqVaumIUOGFPo+LsvXkj+P77//Xu3atVP58uV1yy23aPLkyYWWN2PGDDVo0EDly5dXpUqV1KxZMy1cuNAef/DgQT3zzDOqV6+ePD09VaVKFT300EM6cOBAoXmlp6dryJAhCg4Olru7u2rUqKHHH39cJ06c0Oeff27vWe/Tp4/9vZF/zlpR23Fpv0uWL1+uhg0b2t9lxX2flAR7hP6AhIQEPfjgg3Jzc9MjjzyiWbNmaevWrWrevLnKlSunBx54QMuWLdM777zjsGt3+fLlys7OVvfu3SX9/oe8U6dO+uqrr9S/f3/Vr19fu3bt0htvvKEff/xRy5cvd1ju+vXrtXjxYg0cOFB+fn72hvXmm2+qU6dO6tGjh3JycvTBBx/ooYceUmJiomJiYuzpe/furcWLF6tnz55q2bKlvvjiC4fx+dLS0tSyZUt7A6xatapWrVqlfv36KTMzU7GxsSVaT88//7z+9a9/FbtXqCTLc3JyUuvWrfXll1/a0+3cuVMZGRlydnbWpk2b7NeyceNG3XHHHapQoUKxPZ45c0YnTpyQ9PsfiYULF2r37t167733HOpmzZqlBg0aqFOnTnJ1ddUnn3yiZ555Rnl5eVfcc5SZmal//vOfeuSRR/TEE0/ozJkzeu+99xQdHa0tW7YU2oW8cOFCnTlzRk8++aScnJw0efJkPfjgg9q3b5/9q2rnzp2KjIxUuXLl1L9/fwUHB+uXX37RJ598ogkTJpR4nRalatWqWrBggSZMmKCzZ8/ah4Pq168vy7LUqVMnbdiwQf369VOTJk20Zs0aDR8+XEeOHCl0GO1y2+uVDB48WG+88YbGjh17xb1CaWlpatWqlc6dO6dBgwapSpUqmj9/vjp16qSlS5fqgQcecKifNGmSnJ2dNWzYMGVkZGjy5Mnq0aOHNm/eXGxPkpSbm2tvJ/k8PDzsbezixYuKjo7WnXfeqddff93+hb9kyRKdO3dOTz/9tKpUqaItW7ZoxowZ+vXXX7VkyZISLftSlmXpb3/7m7766is99dRTql+/vj766CP16tWrRNPv27dPy5cv10MPPaRatWopLS1N77zzju666y59//33hQ71lWS9vffee3ryySfVqlUrxcbGat++ferUqZMqV66soKCgEvV14cKFQuu3fPny9no8efKk7r33XnXv3l2PPfaY/P39JUnz5s1ThQoVNHToUFWoUEHr169XXFycMjMz9dprr5Vo2Zf67bff1L59ex06dEiDBg1SYGCgFixYoPXr15d6XpdzLV7L6dOndc899+jBBx/Uww8/rKVLl2rkyJFq1KiR7r33Xkm/H44aNGiQunbtqsGDB+v8+fPauXOnNm/erEcffVSStHXrVn399dfq3r27atSooQMHDmjWrFlq27atvv/+e3v9nz17VpGRkfrhhx/Ut29fNW3aVCdOnNCKFSv066+/qn79+ho/frzi4uLUv39/RUZGSpJatWpV5Doo7XfJV199pWXLlumZ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4XhxWFiYunTpomnTpunkyZP25fM//vijJMc0P2nSJG3YsEHh4eF64oknFBoaqlOnTmnbtm367LPPdOrUqVKvv/y9QvPnzy80rjTLi4iIkKurq/bu3etwAmObNm3sPw6lCUIbN260b+N/6tQprVixQl988YW6d++ukJAQSVKHDh3k5uam+++/X08++aTOnj2rd999V9WqVdN///vfK86/Y8eOWrZsmR544AHFxMRo//79io+PV2ho6FXd50iSpk+frjvvvFNNmzZV//79VatWLR04cEArV660b29/Pd7D+++/X+3atdPzzz+vAwcOqHHjxvrPf/6jjz/+WLGxsQ4nM14LPj4+Gjx4cJEnTY8aNUr//ve/de+992rQoEGqXLmy5s+fr/379+vDDz8sdJiqLISEhKh27doaNmyYjhw5Im9vb3344YdFntfQt29fTZ06VdHR0erXr5+OHTum+Ph4NWjQwOF8kfvvv1+tW7fWqFGjdODAAYWGhmrZsmUlPh+mY8eOGj9+vPr06aNWrVpp165dSkhIKNX5PJcqV66cXn75ZT355JO6++671a1bN+3fv19z58696nmWVKtWrVSpUiX16tVLgwYNkpOTkxYsWFDk4ZK///3vWrp0qe655x49/PDD+uWXX/T+++8X2mafeOIJvfXWW3r88ceVnJys6tWra8GCBdf9hoeleS0l1aFDBwUEBKh169by9/fXDz/8oLfeeksxMTH2XpiOHTtqwYIF8vHxUWhoqJKSkvTZZ58VOl9s+PDhWrp0qR566CH17dtXYWFh9vdlfHy8GjdurNq1a8vX11fx8fGqWLGivLy8FB4eXuS5gjf6u+Sy/tA1Zwa6//77LQ8PDysrK+uyNb1797bKlStnX7Kcl5dnBQUFFXmZYL6cnBzr1VdftRo0aGC5u7tblSpVssLCwqxx48ZZGRkZdp0ka8CAAUXO47333rPq1q1rubu7WyEhIdbcuXOtMWPGFLp0MysryxowYIBVuXJlq0KFClbnzp2tvXv3WpKsSZMmOdSmpaVZAwYMsIKCgqxy5cpZAQEBVvv27a3Zs2cXu64uvXz+Uj/99JPl4uJS6PL50i6vefPmliRr8+bN9rBff/3VkmQFBQUV259lFX35vJubmxUSEmJNmDDBysnJcahfsWKFdfvtt1seHh5WcHCw9eqrr1pz5syxJFn79++36wpejpuXl2e98sorVs2aNS13d3frjjvusBITEwtdTlrUJeL5VOD2BpZlWbt377YeeOABy9fX1/Lw8LDq1atnvfjiiw41f+Q9LOryecv6/RL1IUOGWIGBgVa5cuWsunXrWq+99prDpfv5PV9uey3N8k6fPm35+PgUuW5++eUXq2vXrvY6aNGihZWYmOhQU9TtGizrf+u7uMvNr9Rbvl69elleXl5Fjvv++++tqKgoq0KFCpafn5/1xBNP2Jf+Flz2+++/b912222Wm5ub1aRJE2vNmjWFthPLsqyTJ09aPXv2tLy9vS0fHx+rZ8+e1nfffVfiy+efe+45q3r16panp6fVunVrKykpqdB2W9r1NnPmTKtWrVqWu7u71axZM+vLL7+87C0BCrrc90W+K63/TZs2WS1btrQ8PT2twMBAa8SIEfbtSwpe6j5lyhTrlltusdzd3a3WrVtb3377bZE9Hjx40OrUqZNVvnx5y8/Pzxo8eLC1evXqa3b5/B99LZebR8Ft5Z133rHatGljValSxXJ3d7dq165tDR8+3OHvyunTp60+ffpYfn5+VoUKFazo6GgrJSWlyNsNnDx50ho4cKB1yy23WG5ublaNGjWsXr16Odyi4+OPP7ZCQ0MtV1dXh+2kqO34j36XXO6WCKXh9P8vAIbbvn277rjjDr3//vv23XABALjZlf1+Y9xwBW/rL0nTpk2Ts7Ozwwl6AADc7DhHyECTJ09WcnKy2rVrJ1dXV61atUqrVq1S//79S3wrfAAAbgYcGjPQ2rVrNW7cOH3//fc6e/asbr31VvXs2VPPP/98of9kFACAmxlBCAAAGItzhAAAgLEIQgAAwFicEHIFeXl5Onr0qCpWrHjV//UFAAC4sSzL0pkzZxQYGFjsjVUJQldw9OhRrqICAOAv6vDhw6pRo8YVawhCV5B/+/HDhw/L29u7jLsBAAAlkZmZqaCgIIf/zPVyCEJXkH84zNvbmyAEAMBfTElOa+FkaQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxXMu6Afw5BY9aWdYt4AY6MCmmrFsAgDLBHiEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYq1RBKDc3Vy+++KJq1aolT09P1a5dWy+99JIsy7JrLMtSXFycqlevLk9PT0VFRemnn35ymM+pU6fUo0cPeXt7y9fXV/369dPZs2cdanbu3KnIyEh5eHgoKChIkydPLtTPkiVLFBISIg8PDzVq1Eiffvqpw/iS9AIAAMxVqiD06quvatasWXrrrbf0ww8/6NVXX9XkyZM1Y8YMu2by5MmaPn264uPjtXnzZnl5eSk6Olrnz5+3a3r06KE9e/Zo7dq1SkxM1Jdffqn+/fvb4zMzM9WhQwfVrFlTycnJeu211zR27FjNnj3brvn666/1yCOPqF+/fvruu+/UuXNnde7cWbt37y5VLwAAwFxO1qW7c4rRsWNH+fv767333rOHdenSRZ6ennr//fdlWZYCAwP13HPPadiwYZKkjIwM+fv7a968eerevbt++OEHhYaGauvWrWrWrJkkafXq1brvvvv066+/KjAwULNmzdLzzz+v1NRUubm5SZJGjRql5cuXKyUlRZLUrVs3ZWVlKTEx0e6lZcuWatKkieLj40vUS3EyMzPl4+OjjIwMeXt7l3Q13RSCR60s6xZwAx2YFFPWLQDANVOav9+l2iPUqlUrrVu3Tj/++KMkaceOHfrqq6907733SpL279+v1NRURUVF2dP4+PgoPDxcSUlJkqSkpCT5+vraIUiSoqKi5OzsrM2bN9s1bdq0sUOQJEVHR2vv3r06ffq0XXPpcvJr8pdTkl4Kys7OVmZmpsMDAADcvFxLUzxq1ChlZmYqJCRELi4uys3N1YQJE9SjRw9JUmpqqiTJ39/fYTp/f397XGpqqqpVq+bYhKurKleu7FBTq1atQvPIH1epUiWlpqYWu5zieilo4sSJGjduXAnWBAAAuBmUao/Q4sWLlZCQoIULF2rbtm2aP3++Xn/9dc2fP/969XdDjR49WhkZGfbj8OHDZd0SAAC4jkq1R2j48OEaNWqUfX5No0aNdPDgQU2cOFG9evVSQECAJCktLU3Vq1e3p0tLS1OTJk0kSQEBATp27JjDfC9evKhTp07Z0wcEBCgtLc2hJv95cTWXji+ul4Lc3d3l7u5espUBAAD+8kq1R+jcuXNydnacxMXFRXl5eZKkWrVqKSAgQOvWrbPHZ2ZmavPmzYqIiJAkRUREKD09XcnJyXbN+vXrlZeXp/DwcLvmyy+/1IULF+yatWvXql69eqpUqZJdc+ly8mvyl1OSXgAAgNlKFYTuv/9+TZgwQStXrtSBAwf00UcfaerUqXrggQckSU5OToqNjdXLL7+sFStWaNeuXXr88ccVGBiozp07S5Lq16+ve+65R0888YS2bNmiTZs2aeDAgerevbsCAwMlSY8++qjc3NzUr18/7dmzR4sWLdKbb76poUOH2r0MHjxYq1ev1pQpU5SSkqKxY8fq22+/1cCBA0vcCwAAMFupDo3NmDFDL774op555hkdO3ZMgYGBevLJJxUXF2fXjBgxQllZWerfv7/S09N15513avXq1fLw8LBrEhISNHDgQLVv317Ozs7q0qWLpk+fbo/38fHRf/7zHw0YMEBhYWHy8/NTXFycw72GWrVqpYULF+qFF17QP/7xD9WtW1fLly9Xw4YNS9ULAAAwV6nuI2Qa7iMEU3AfIQA3k+t2HyEAAICbCUEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWKUOQkeOHNFjjz2mKlWqyNPTU40aNdK3335rj7csS3Fxcapevbo8PT0VFRWln376yWEep06dUo8ePeTt7S1fX1/169dPZ8+edajZuXOnIiMj5eHhoaCgIE2ePLlQL0uWLFFISIg8PDzUqFEjffrppw7jS9ILAAAwV6mC0OnTp9W6dWuVK1dOq1at0vfff68pU6aoUqVKds3kyZM1ffp0xcfHa/PmzfLy8lJ0dLTOnz9v1/To0UN79uzR2rVrlZiYqC+//FL9+/e3x2dmZqpDhw6qWbOmkpOT9dprr2ns2LGaPXu2XfP111/rkUceUb9+/fTdd9+pc+fO6ty5s3bv3l2qXgAAgLmcLMuySlo8atQobdq0SRs3bixyvGVZCgwM1HPPPadhw4ZJkjIyMuTv76958+ape/fu+uGHHxQaGqqtW7eqWbNmkqTVq1frvvvu06+//qrAwEDNmjVLzz//vFJTU+Xm5mYve/ny5UpJSZEkdevWTVlZWUpMTLSX37JlSzVp0kTx8fEl6qU4mZmZ8vHxUUZGhry9vUu6mm4KwaNWlnULuIEOTIop6xYA4Jopzd/vUu0RWrFihZo1a6aHHnpI1apV0x133KF3333XHr9//36lpqYqKirKHubj46Pw8HAlJSVJkpKSkuTr62uHIEmKioqSs7OzNm/ebNe0adPGDkGSFB0drb179+r06dN2zaXLya/JX05JeikoOztbmZmZDg8AAHDzKlUQ2rdvn2bNmqW6detqzZo1evrppzVo0CDNnz9fkpSamipJ8vf3d5jO39/fHpeamqpq1ao5jHd1dVXlypUdaoqax6XLuFzNpeOL66WgiRMnysfHx34EBQUVt0oAAMBfWKmCUF5enpo2bapXXnlFd9xxh/r3768nnnhC8fHx16u/G2r06NHKyMiwH4cPHy7rlgAAwHVUqiBUvXp1hYaGOgyrX7++Dh06JEkKCAiQJKWlpTnUpKWl2eMCAgJ07Ngxh/EXL17UqVOnHGqKmsely7hczaXji+ulIHd3d3l7ezs8AADAzatUQah169bau3evw7Aff/xRNWvWlCTVqlVLAQEBWrdunT0+MzNTmzdvVkREhCQpIiJC6enpSk5OtmvWr1+vvLw8hYeH2zVffvmlLly4YNesXbtW9erVs69Qi4iIcFhOfk3+ckrSCwAAMFupgtCQIUP0zTff6JVXXtHPP/+shQsXavbs2RowYIAkycnJSbGxsXr55Ze1YsUK7dq1S48//rgCAwPVuXNnSb/vQbrnnnv0xBNPaMuWLdq0aZMGDhyo7t27KzAwUJL06KOPys3NTf369dOePXu0aNEivfnmmxo6dKjdy+DBg7V69WpNmTJFKSkpGjt2rL799lsNHDiwxL0AAACzuZamuHnz5vroo480evRojR8/XrVq1dK0adPUo0cPu2bEiBHKyspS//79lZ6erjvvvFOrV6+Wh4eHXZOQkKCBAweqffv2cnZ2VpcuXTR9+nR7vI+Pj/7zn/9owIABCgsLk5+fn+Li4hzuNdSqVSstXLhQL7zwgv7xj3+obt26Wr58uRo2bFiqXgAAgLlKdR8h03AfIZiC+wgBuJlct/sIAQAA3EwIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMb6Q0Fo0qRJcnJyUmxsrD3s/PnzGjBggKpUqaIKFSqoS5cuSktLc5ju0KFDiomJUfny5VWtWjUNHz5cFy9edKj5/PPP1bRpU7m7u6tOnTqaN29eoeW//fbbCg4OloeHh8LDw7VlyxaH8SXpBQAAmOuqg9DWrVv1zjvv6Pbbb3cYPmTIEH3yySdasmSJvvjiCx09elQPPvigPT43N1cxMTHKycnR119/rfnz52vevHmKi4uza/bv36+YmBi1a9dO27dvV2xsrP7+979rzZo1ds2iRYs0dOhQjRkzRtu2bVPjxo0VHR2tY8eOlbgXAABgNifLsqzSTnT27Fk1bdpUM2fO1Msvv6wmTZpo2rRpysjIUNWqVbVw4UJ17dpVkpSSkqL69esrKSlJLVu21KpVq9SxY0cdPXpU/v7+kqT4+HiNHDlSx48fl5ubm0aOHKmVK1dq9+7d9jK7d++u9PR0rV69WpIUHh6u5s2b66233pIk5eXlKSgoSM8++6xGjRpVol6Kk5mZKR8fH2VkZMjb27u0q+kvLXjUyrJuATfQgUkxZd0CAFwzpfn7fVV7hAYMGKCYmBhFRUU5DE9OTtaFCxcchoeEhOjWW29VUlKSJCkpKUmNGjWyQ5AkRUdHKzMzU3v27LFrCs47OjrankdOTo6Sk5MdapydnRUVFWXXlKSXgrKzs5WZmenwAAAANy/X0k7wwQcfaNu2bdq6dWuhcampqXJzc5Ovr6/DcH9/f6Wmpto1l4ag/PH5465Uk5mZqd9++02nT59Wbm5ukTUpKSkl7qWgiRMnaty4cVd49QAA4GZSqj1Chw8f1uDBg5WQkCAPD4/r1VOZGT16tDIyMuzH4cOHy7olAABwHZUqCCUnJ+vYsWNq2rSpXF1d5erqqi+++ELTp0+Xq6ur/P39lZOTo/T0dIfp0tLSFBAQIEkKCAgodOVW/vPiary9veXp6Sk/Pz+5uLgUWXPpPIrrpSB3d3d5e3s7PAAAwM2rVEGoffv22rVrl7Zv324/mjVrph49etj/LleunNatW2dPs3fvXh06dEgRERGSpIiICO3atcvh6q61a9fK29tboaGhds2l88ivyZ+Hm5ubwsLCHGry8vK0bt06uyYsLKzYXgAAgNlKdY5QxYoV1bBhQ4dhXl5eqlKlij28X79+Gjp0qCpXrixvb289++yzioiIsK/S6tChg0JDQ9WzZ09NnjxZqampeuGFFzRgwAC5u7tLkp566im99dZbGjFihPr27av169dr8eLFWrnyf1cyDR06VL169VKzZs3UokULTZs2TVlZWerTp48kycfHp9heAACA2Up9snRx3njjDTk7O6tLly7Kzs5WdHS0Zs6caY93cXFRYmKinn76aUVERMjLy0u9evXS+PHj7ZpatWpp5cqVGjJkiN58803VqFFD//znPxUdHW3XdOvWTcePH1dcXJxSU1PVpEkTrV692uEE6uJ6AQAAZruq+wiZgvsIwRTcRwjAzeS630cIAADgZkAQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYKxSBaGJEyeqefPmqlixoqpVq6bOnTtr7969DjXnz5/XgAEDVKVKFVWoUEFdunRRWlqaQ82hQ4cUExOj8uXLq1q1aho+fLguXrzoUPP555+radOmcnd3V506dTRv3rxC/bz99tsKDg6Wh4eHwsPDtWXLllL3AgAAzFWqIPTFF19owIAB+uabb7R27VpduHBBHTp0UFZWll0zZMgQffLJJ1qyZIm++OILHT16VA8++KA9Pjc3VzExMcrJydHXX3+t+fPna968eYqLi7Nr9u/fr5iYGLVr107bt29XbGys/v73v2vNmjV2zaJFizR06FCNGTNG27ZtU+PGjRUdHa1jx46VuBcAAGA2J8uyrKud+Pjx46pWrZq++OILtWnTRhkZGapataoWLlyorl27SpJSUlJUv359JSUlqWXLllq1apU6duyoo0ePyt/fX5IUHx+vkSNH6vjx43Jzc9PIkSO1cuVK7d69215W9+7dlZ6ertWrV0uSwsPD1bx5c7311luSpLy8PAUFBenZZ5/VqFGjStRLcTIzM+Xj46OMjAx5e3tf7Wr6SwoetbKsW8ANdGBSTFm3AADXTGn+fv+hc4QyMjIkSZUrV5YkJScn68KFC4qKirJrQkJCdOuttyopKUmSlJSUpEaNGtkhSJKio6OVmZmpPXv22DWXziO/Jn8eOTk5Sk5OdqhxdnZWVFSUXVOSXgAAgNlcr3bCvLw8xcbGqnXr1mrYsKEkKTU1VW5ubvL19XWo9ff3V2pqql1zaQjKH58/7ko1mZmZ+u2333T69Gnl5uYWWZOSklLiXgrKzs5Wdna2/TwzM7O41QAAAP7CrnqP0IABA7R792598MEH17KfMjVx4kT5+PjYj6CgoLJuCQAAXEdXFYQGDhyoxMREbdiwQTVq1LCHBwQEKCcnR+np6Q71aWlpCggIsGsKXrmV/7y4Gm9vb3l6esrPz08uLi5F1lw6j+J6KWj06NHKyMiwH4cPHy7B2gAAAH9VpQpClmVp4MCB+uijj7R+/XrVqlXLYXxYWJjKlSundevW2cP27t2rQ4cOKSIiQpIUERGhXbt2OVzdtXbtWnl7eys0NNSuuXQe+TX583Bzc1NYWJhDTV5entatW2fXlKSXgtzd3eXt7e3wAAAAN69SnSM0YMAALVy4UB9//LEqVqxon2vj4+MjT09P+fj4qF+/fho6dKgqV64sb29vPfvss4qIiLCv0urQoYNCQ0PVs2dPTZ48WampqXrhhRc0YMAAubu7S5KeeuopvfXWWxoxYoT69u2r9evXa/HixVq58n9XMg0dOlS9evVSs2bN1KJFC02bNk1ZWVnq06eP3VNxvQCAibgq1CxcFXplpQpCs2bNkiS1bdvWYfjcuXPVu3dvSdIbb7whZ2dndenSRdnZ2YqOjtbMmTPtWhcXFyUmJurpp59WRESEvLy81KtXL40fP96uqVWrllauXKkhQ4bozTffVI0aNfTPf/5T0dHRdk23bt10/PhxxcXFKTU1VU2aNNHq1asdTqAurhcAAGC2P3QfoZsd9xGCKfjFaBY+32Yx8fN9w+4jBAAA8FdGEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIxFEAIAAMYiCAEAAGMRhAAAgLEIQgAAwFgEIQAAYCyCEAAAMBZBCAAAGIsgBAAAjEUQAgAAxiIIAQAAYxGEAACAsQhCAADAWAQhAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADCWEUHo7bffVnBwsDw8PBQeHq4tW7aUdUsAAOBP4KYPQosWLdLQoUM1ZswYbdu2TY0bN1Z0dLSOHTtW1q0BAIAydtMHoalTp+qJJ55Qnz59FBoaqvj4eJUvX15z5swp69YAAEAZu6mDUE5OjpKTkxUVFWUPc3Z2VlRUlJKSksqwMwAA8GfgWtYNXE8nTpxQbm6u/P39HYb7+/srJSWlUH12drays7Pt5xkZGZKkzMzM69von1Be9rmybgE3kInbuMn4fJvFxM93/mu2LKvY2ps6CJXWxIkTNW7cuELDg4KCyqAb4MbxmVbWHQC4Xkz+fJ85c0Y+Pj5XrLmpg5Cfn59cXFyUlpbmMDwtLU0BAQGF6kePHq2hQ4faz/Py8nTq1ClVqVJFTk5O171flK3MzEwFBQXp8OHD8vb2Lut2AFxDfL7NYlmWzpw5o8DAwGJrb+og5ObmprCwMK1bt06dO3eW9Hu4WbdunQYOHFio3t3dXe7u7g7DfH19b0Cn+DPx9vbmixK4SfH5Nkdxe4Ly3dRBSJKGDh2qXr16qVmzZmrRooWmTZumrKws9enTp6xbAwAAZeymD0LdunXT8ePHFRcXp9TUVDVp0kSrV68udAI1AAAwz00fhCRp4MCBRR4KAy7l7u6uMWPGFDo8CuCvj883LsfJKsm1ZQAAADehm/qGigAAAFdCEAIAAMYiCAEAAGMRhAAAgLGMuGoMKMqJEyc0Z84cJSUlKTU1VZIUEBCgVq1aqXfv3qpatWoZdwgAuN64agxG2rp1q6Kjo1W+fHlFRUXZ95VKS0vTunXrdO7cOa1Zs0bNmjUr404BANcTQQhGatmypRo3bqz4+PhC/4+cZVl66qmntHPnTiUlJZVRhwCup8OHD2vMmDGaM2dOWbeCMkYQgpE8PT313XffKSQkpMjxKSkpuuOOO/Tbb7/d4M4A3Ag7duxQ06ZNlZubW9atoIxxjhCMFBAQoC1btlw2CG3ZsoX/hgX4C1uxYsUVx+/bt+8GdYI/O4IQjDRs2DD1799fycnJat++faFzhN599129/vrrZdwlgKvVuXNnOTk56UoHPQoeFoeZODQGYy1atEhvvPGGkpOT7d3jLi4uCgsL09ChQ/Xwww+XcYcArtYtt9yimTNn6m9/+1uR47dv366wsDAOjYEgBFy4cEEnTpyQJPn5+alcuXJl3BGAP6pTp05q0qSJxo8fX+T4HTt26I477lBeXt4N7gx/Nhwag/HKlSun6tWrl3UbAK6h4cOHKysr67Lj69Spow0bNtzAjvBnxR4hAABgLP6LDQAAYCyCEAAAMBZBCAAAGIsgBOBPrW3btoqNjS3rNkqld+/e6ty5c1m3AaAECEIA/tSWLVuml156qdi63r17y8nJqdDj559/vgFdAvir4vJ5AH9qlStXLnHtPffco7lz5zoMq1q1aqG6nJwcubm5/eHeAPz1sUcIwJ/apYfGZs6cqbp168rDw0P+/v7q2rWrQ627u7sCAgIcHi4uLmrbtq0GDhyo2NhY+fn5KTo6WpI0depUNWrUSF5eXgoKCtIzzzyjs2fP2vMbO3asmjRp4rCMadOmKTg42H6em5uroUOHytfXV1WqVNGIESOu+N86APhzIQgB+Ev49ttvNWjQII0fP1579+7V6tWr1aZNmxJPP3/+fLm5uWnTpk2Kj4+XJDk7O2v69Onas2eP5s+fr/Xr12vEiBGl6mvKlCmaN2+e5syZo6+++kqnTp3SRx99VKp5ACg7HBoD8Jdw6NAheXl5qWPHjqpYsaJq1qypO+64w6EmMTFRFSpUsJ/fe++9WrJkiSSpbt26mjx5skP9pSdhBwcH6+WXX9ZTTz2lmTNnlrivadOmafTo0XrwwQclSfHx8VqzZk1pXx6AMkIQAvCX8H//93+qWbOmbrvtNt1zzz2655579MADD6h8+fJ2Tbt27TRr1iz7uZeXl/3vsLCwQvP87LPPNHHiRKWkpCgzM1MXL17U+fPnde7cOYf5Xk5GRob++9//Kjw83B7m6uqqZs2acXgM+Ivg0BiAv4SKFStq27Zt+ve//63q1asrLi5OjRs3Vnp6ul3j5eWlOnXq2I9L/w+5S0ORJB04cEAdO3bU7bffrg8//FDJycl6++23Jf1+MrX0+6GzgoHmwoUL1+kVAigLBCEAfxmurq6KiorS5MmTtXPnTh04cEDr16+/qnklJycrLy9PU6ZMUcuWLfX//t//09GjRx1qqlatqtTUVIcwtH37dvvfPj4+ql69ujZv3mwPu3jxopKTk6+qJwA3HofGAPwlJCYmat++fWrTpo0qVaqkTz/9VHl5eapXr95Vza9OnTq6cOGCZsyYofvvv9/hJOp8bdu21fHjxzV58mR17dpVq1ev1qpVq+Tt7W3XDB48WJMmTVLdunUVEhKiqVOnOuylAvDnxh4hAH8Jvr6+WrZsme6++27Vr19f8fHx+ve//60GDRpc1fwaN26sqVOn6tVXX1XDhg2VkJCgiRMnOtTUr19fM2fO1Ntvv63GjRtry5YtGjZsmEPNc889p549e6pXr16KiIhQxYoV9cADD1z16wRwYzlZnNEHAAAMxR4hAABgLIIQAAAwFkEIAAAYiyAEAACMRRACAADGIggBAABjEYQAAICxCEIAAMBYBCEAAGAsghAAADAWQQgAABiLIAQAAIz1/wFpxn7obRfQsQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Average time taken for a fraudalent transaction\n",
        "balance_fraud_df.groupby('isFraud')['step'].mean().plot(kind='bar',\n",
        "                                                        title='Average time taken for Fraud and Non-Fraudalent Transaction');"
      ],
      "metadata": {
        "id": "tze3wLEjBUda",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "outputId": "41a2d3e1-4113-428e-e2c5-c7a1b2032c7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fraud_df1['minutespent'] = (fraud_df1['step'] - fraud_df1['step'].min()) * 60\n",
        "#Average minutes spent on fraudalent transactions\n",
        "fraud_df1.head()"
      ],
      "metadata": {
        "id": "SAG8-UlcvLr8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "4728185d-bd78-49d1-f45f-67d42cfeb8ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      step      type      amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n",
              "6791   357  TRANSFER  4177467.46  C1493761372     4177467.46             0.0   \n",
              "7863    12  CASH_OUT  3964129.99  C1098250442     3964129.99             0.0   \n",
              "3647    34  TRANSFER    27951.26   C722855847       27951.26             0.0   \n",
              "7364   214  CASH_OUT  1368391.50   C486163456     1368391.50             0.0   \n",
              "5549   603  CASH_OUT   158879.10  C1711046896      158879.10             0.0   \n",
              "\n",
              "         nameDest  oldbalanceDest  newbalanceDest isFraud  isFlaggedFraud  \\\n",
              "6791  C1907708290            0.00            0.00       1               0   \n",
              "7863  C1140712423      1912955.54      5811064.07       1               0   \n",
              "3647   C866867675            0.00            0.00       1               0   \n",
              "7364   C385133759       258210.84      1626602.34       1               0   \n",
              "5549  C1985698288       751402.72       910281.82       1               0   \n",
              "\n",
              "      minutespent  \n",
              "6791        21360  \n",
              "7863          660  \n",
              "3647         1980  \n",
              "7364        12780  \n",
              "5549        36120  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59847eea-e46b-4601-9fa5-693539b68f24\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>nameOrig</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>nameDest</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <th>minutespent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6791</th>\n",
              "      <td>357</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>4177467.46</td>\n",
              "      <td>C1493761372</td>\n",
              "      <td>4177467.46</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C1907708290</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>21360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7863</th>\n",
              "      <td>12</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>3964129.99</td>\n",
              "      <td>C1098250442</td>\n",
              "      <td>3964129.99</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C1140712423</td>\n",
              "      <td>1912955.54</td>\n",
              "      <td>5811064.07</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3647</th>\n",
              "      <td>34</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>27951.26</td>\n",
              "      <td>C722855847</td>\n",
              "      <td>27951.26</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C866867675</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1980</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7364</th>\n",
              "      <td>214</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>1368391.50</td>\n",
              "      <td>C486163456</td>\n",
              "      <td>1368391.50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C385133759</td>\n",
              "      <td>258210.84</td>\n",
              "      <td>1626602.34</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5549</th>\n",
              "      <td>603</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>158879.10</td>\n",
              "      <td>C1711046896</td>\n",
              "      <td>158879.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C1985698288</td>\n",
              "      <td>751402.72</td>\n",
              "      <td>910281.82</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>36120</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59847eea-e46b-4601-9fa5-693539b68f24')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-59847eea-e46b-4601-9fa5-693539b68f24 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-59847eea-e46b-4601-9fa5-693539b68f24');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-52734fda-f253-4a90-b9ef-72de1ae5c107\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52734fda-f253-4a90-b9ef-72de1ae5c107')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-52734fda-f253-4a90-b9ef-72de1ae5c107 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "fraud_df1",
              "summary": "{\n  \"name\": \"fraud_df1\",\n  \"rows\": 8213,\n  \"fields\": [\n    {\n      \"column\": \"step\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 216,\n        \"min\": 1,\n        \"max\": 743,\n        \"num_unique_values\": 741,\n        \"samples\": [\n          625,\n          291,\n          699\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"CASH_OUT\",\n          \"TRANSFER\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2404252.947240169,\n        \"min\": 0.0,\n        \"max\": 10000000.0,\n        \"num_unique_values\": 3977,\n        \"samples\": [\n          1494146.93,\n          115125.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nameOrig\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8213,\n        \"samples\": [\n          \"C706829068\",\n          \"C14325153\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceOrg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3547719.4391091294,\n        \"min\": 0.0,\n        \"max\": 59585040.37,\n        \"num_unique_values\": 4094,\n        \"samples\": [\n          24339822.23,\n          291305.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceOrig\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1965666.4557191334,\n        \"min\": 0.0,\n        \"max\": 49585040.37,\n        \"num_unique_values\": 145,\n        \"samples\": [\n          6468916.64,\n          5618179.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nameDest\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8169,\n        \"samples\": [\n          \"C1485040019\",\n          \"C1652576276\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3336420.950924954,\n        \"min\": 0.0,\n        \"max\": 236230516.82,\n        \"num_unique_values\": 2863,\n        \"samples\": [\n          711124.24,\n          901329.73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3908816.533815756,\n        \"min\": 0.0,\n        \"max\": 236726494.66,\n        \"num_unique_values\": 4067,\n        \"samples\": [\n          472472.07,\n          1640305.68\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFraud\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFlaggedFraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minutespent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12983,\n        \"min\": 0,\n        \"max\": 44520,\n        \"num_unique_values\": 741,\n        \"samples\": [\n          37440\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Average hour spent on fraud based on transaction type\n",
        "fraud_df1.groupby(['type', 'isFraud'])['step'].mean().plot(kind='bar',\n",
        "                                                                  title=\"Average hours spent on fraud based on transaction type\");"
      ],
      "metadata": {
        "id": "hy5wGVAdrpAY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "outputId": "1007c74d-81cb-4590-9a21-3ffe6720e269"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# EXploratory Data analysis"
      ],
      "metadata": {
        "id": "oExGZExsW17E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Percentage change in balance due to fradalent transaction based on transaction type\n",
        "fraud_df1 = fraud_df[fraud_df['isFraud'] == '1'].sample(n=min_count, random_state=42)\n",
        "fraud_df1['per_change_balance'] = (fraud_df1['oldbalanceOrg'] - fraud_df1['newbalanceOrig'])/100\n",
        "\n",
        "#Average balance of fradalent transaction based on transaction type\n",
        "fraud_df1.groupby('type')['per_change_balance'].mean().plot(kind='bar',\n",
        "                                                            title='Average balance of fraudalent account based on transaction type');"
      ],
      "metadata": {
        "id": "09uQH0BV4K4K",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 533
        },
        "outputId": "576d6d58-ed94-41df-b35f-2182a2afd9c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Rename step to hour\n",
        "balance_fraud_df.rename(columns={'step':'hours'}, inplace=True)\n",
        "balance_fraud_df"
      ],
      "metadata": {
        "id": "JaTcfUAOW_vd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "0eb9965a-51af-4bfb-9b96-ed0d2ac8d616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       hours      type      amount  oldbalanceOrg  newbalanceOrig  \\\n",
              "0        357  TRANSFER  4177467.46     4177467.46            0.00   \n",
              "1         12  CASH_OUT  3964129.99     3964129.99            0.00   \n",
              "2         34  TRANSFER    27951.26       27951.26            0.00   \n",
              "3        214  CASH_OUT  1368391.50     1368391.50            0.00   \n",
              "4        603  CASH_OUT   158879.10      158879.10            0.00   \n",
              "...      ...       ...         ...            ...             ...   \n",
              "16421    373   CASH_IN     8525.62    11653750.32     11662275.94   \n",
              "16422    207  CASH_OUT     7401.05       51424.77        44023.72   \n",
              "16423      8  CASH_OUT    24572.83           0.00            0.00   \n",
              "16424    349  CASH_OUT   228118.13       16649.00            0.00   \n",
              "16425    347   CASH_IN   266999.97     7411271.89      7678271.86   \n",
              "\n",
              "       oldbalanceDest  newbalanceDest isFraud  \n",
              "0                0.00            0.00       1  \n",
              "1          1912955.54      5811064.07       1  \n",
              "2                0.00            0.00       1  \n",
              "3           258210.84      1626602.34       1  \n",
              "4           751402.72       910281.82       1  \n",
              "...               ...             ...     ...  \n",
              "16421        31897.99        23372.37       0  \n",
              "16422       150035.32       157436.37       0  \n",
              "16423        51573.00       514119.92       0  \n",
              "16424       302736.84       530854.97       0  \n",
              "16425       386812.88       119812.91       0  \n",
              "\n",
              "[16426 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89d19e79-db8f-4817-ae30-1188da4626a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hours</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>357</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>4177467.46</td>\n",
              "      <td>4177467.46</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>3964129.99</td>\n",
              "      <td>3964129.99</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1912955.54</td>\n",
              "      <td>5811064.07</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>34</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>27951.26</td>\n",
              "      <td>27951.26</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>214</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>1368391.50</td>\n",
              "      <td>1368391.50</td>\n",
              "      <td>0.00</td>\n",
              "      <td>258210.84</td>\n",
              "      <td>1626602.34</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>603</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>158879.10</td>\n",
              "      <td>158879.10</td>\n",
              "      <td>0.00</td>\n",
              "      <td>751402.72</td>\n",
              "      <td>910281.82</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16421</th>\n",
              "      <td>373</td>\n",
              "      <td>CASH_IN</td>\n",
              "      <td>8525.62</td>\n",
              "      <td>11653750.32</td>\n",
              "      <td>11662275.94</td>\n",
              "      <td>31897.99</td>\n",
              "      <td>23372.37</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16422</th>\n",
              "      <td>207</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>7401.05</td>\n",
              "      <td>51424.77</td>\n",
              "      <td>44023.72</td>\n",
              "      <td>150035.32</td>\n",
              "      <td>157436.37</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16423</th>\n",
              "      <td>8</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>24572.83</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>51573.00</td>\n",
              "      <td>514119.92</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16424</th>\n",
              "      <td>349</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>228118.13</td>\n",
              "      <td>16649.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>302736.84</td>\n",
              "      <td>530854.97</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16425</th>\n",
              "      <td>347</td>\n",
              "      <td>CASH_IN</td>\n",
              "      <td>266999.97</td>\n",
              "      <td>7411271.89</td>\n",
              "      <td>7678271.86</td>\n",
              "      <td>386812.88</td>\n",
              "      <td>119812.91</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>16426 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89d19e79-db8f-4817-ae30-1188da4626a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-89d19e79-db8f-4817-ae30-1188da4626a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-89d19e79-db8f-4817-ae30-1188da4626a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cf3c8a06-f2a8-4097-b2f8-1830bd5e2110\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf3c8a06-f2a8-4097-b2f8-1830bd5e2110')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cf3c8a06-f2a8-4097-b2f8-1830bd5e2110 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_84b8895c-1e17-48b5-a2f8-51befcb5c3c1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('balance_fraud_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_84b8895c-1e17-48b5-a2f8-51befcb5c3c1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('balance_fraud_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "balance_fraud_df",
              "summary": "{\n  \"name\": \"balance_fraud_df\",\n  \"rows\": 16426,\n  \"fields\": [\n    {\n      \"column\": \"hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 193,\n        \"min\": 1,\n        \"max\": 743,\n        \"num_unique_values\": 743,\n        \"samples\": [\n          231,\n          472,\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"CASH_OUT\",\n          \"DEBIT\",\n          \"PAYMENT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1862573.0066868605,\n        \"min\": 0.0,\n        \"max\": 31479113.67,\n        \"num_unique_values\": 12185,\n        \"samples\": [\n          1096187.24,\n          371771.44,\n          6595.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceOrg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3252860.4389281,\n        \"min\": 0.0,\n        \"max\": 59585040.37,\n        \"num_unique_values\": 9410,\n        \"samples\": [\n          3379009.86,\n          667257.72,\n          43793.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceOrig\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2505015.7253934518,\n        \"min\": 0.0,\n        \"max\": 49585040.37,\n        \"num_unique_values\": 3712,\n        \"samples\": [\n          4524.5,\n          236336.23,\n          825033.08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3484265.685904527,\n        \"min\": 0.0,\n        \"max\": 236230516.82,\n        \"num_unique_values\": 7626,\n        \"samples\": [\n          408610.64,\n          257719.2,\n          174455.21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3864759.8818186102,\n        \"min\": 0.0,\n        \"max\": 236726494.66,\n        \"num_unique_values\": 9166,\n        \"samples\": [\n          339189.76,\n          1209475.22,\n          353027.27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFraud\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"0\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Encoding variables\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "encoder = LabelEncoder()\n",
        "\n",
        "for col in balance_fraud_df.columns:\n",
        "  if isinstance(balance_fraud_df[col][0], str):\n",
        "    balance_fraud_df[col] = encoder.fit_transform(balance_fraud_df[col])\n",
        "\n",
        "balance_fraud_df['isFraud'] = balance_fraud_df['isFraud'].map({1:'Fraud', 0:'Non_Fraud'})"
      ],
      "metadata": {
        "id": "W8Ytb7feXKi2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "balance_fraud_df.head()"
      ],
      "metadata": {
        "id": "rQCIhf9yefRy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "e664090a-b91c-4079-9d49-0c8a76553187"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   hours  type      amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n",
              "0    357     4  4177467.46     4177467.46             0.0            0.00   \n",
              "1     12     1  3964129.99     3964129.99             0.0      1912955.54   \n",
              "2     34     4    27951.26       27951.26             0.0            0.00   \n",
              "3    214     1  1368391.50     1368391.50             0.0       258210.84   \n",
              "4    603     1   158879.10      158879.10             0.0       751402.72   \n",
              "\n",
              "   newbalanceDest isFraud  \n",
              "0            0.00   Fraud  \n",
              "1      5811064.07   Fraud  \n",
              "2            0.00   Fraud  \n",
              "3      1626602.34   Fraud  \n",
              "4       910281.82   Fraud  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f047ea67-1945-4a60-b7b6-862f1e8f2de4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hours</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>357</td>\n",
              "      <td>4</td>\n",
              "      <td>4177467.46</td>\n",
              "      <td>4177467.46</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Fraud</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>3964129.99</td>\n",
              "      <td>3964129.99</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1912955.54</td>\n",
              "      <td>5811064.07</td>\n",
              "      <td>Fraud</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>34</td>\n",
              "      <td>4</td>\n",
              "      <td>27951.26</td>\n",
              "      <td>27951.26</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Fraud</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>214</td>\n",
              "      <td>1</td>\n",
              "      <td>1368391.50</td>\n",
              "      <td>1368391.50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>258210.84</td>\n",
              "      <td>1626602.34</td>\n",
              "      <td>Fraud</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>603</td>\n",
              "      <td>1</td>\n",
              "      <td>158879.10</td>\n",
              "      <td>158879.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>751402.72</td>\n",
              "      <td>910281.82</td>\n",
              "      <td>Fraud</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f047ea67-1945-4a60-b7b6-862f1e8f2de4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f047ea67-1945-4a60-b7b6-862f1e8f2de4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f047ea67-1945-4a60-b7b6-862f1e8f2de4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a87e75c-e62a-40aa-8ae7-6a42571d2a50\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a87e75c-e62a-40aa-8ae7-6a42571d2a50')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a87e75c-e62a-40aa-8ae7-6a42571d2a50 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "balance_fraud_df",
              "summary": "{\n  \"name\": \"balance_fraud_df\",\n  \"rows\": 16426,\n  \"fields\": [\n    {\n      \"column\": \"hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 193,\n        \"min\": 1,\n        \"max\": 743,\n        \"num_unique_values\": 743,\n        \"samples\": [\n          231,\n          472,\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1862573.0066868605,\n        \"min\": 0.0,\n        \"max\": 31479113.67,\n        \"num_unique_values\": 12185,\n        \"samples\": [\n          1096187.24,\n          371771.44,\n          6595.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceOrg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3252860.4389281,\n        \"min\": 0.0,\n        \"max\": 59585040.37,\n        \"num_unique_values\": 9410,\n        \"samples\": [\n          3379009.86,\n          667257.72,\n          43793.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceOrig\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2505015.7253934518,\n        \"min\": 0.0,\n        \"max\": 49585040.37,\n        \"num_unique_values\": 3712,\n        \"samples\": [\n          4524.5,\n          236336.23,\n          825033.08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3484265.685904527,\n        \"min\": 0.0,\n        \"max\": 236230516.82,\n        \"num_unique_values\": 7626,\n        \"samples\": [\n          408610.64,\n          257719.2,\n          174455.21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3864759.8818186102,\n        \"min\": 0.0,\n        \"max\": 236726494.66,\n        \"num_unique_values\": 9166,\n        \"samples\": [\n          339189.76,\n          1209475.22,\n          353027.27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"isFraud\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Non_Fraud\",\n          \"Fraud\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Assign variables\n",
        "X = balance_fraud_df.drop(columns=['isFraud'])\n",
        "y = balance_fraud_df['isFraud']"
      ],
      "metadata": {
        "id": "c2jtzlpdiAHT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Splitting dataset into train and test\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "McFydvkYKlnD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "metadata": {
        "id": "WdtBLsSoDlPI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3f13a831-f58a-47a2-9868-8b28b34ccaa1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3286, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Normalizing data\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "balance_fraud_df1 = scaler.fit_transform(X_train)\n",
        "normalized_df = pd.DataFrame(balance_fraud_df1, columns=X_train.columns)\n",
        "normalized_df.head()"
      ],
      "metadata": {
        "id": "6sf3eWjPfpSk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "80c93da8-d47e-4502-e8a2-40ff418da904"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      hours      type    amount  oldbalanceOrg  newbalanceOrig  \\\n",
              "0 -0.465346 -0.738067 -0.392805      -0.355335       -0.210303   \n",
              "1  1.510404  1.290845  3.443757       1.873162       -0.210303   \n",
              "2  0.741770 -0.738067 -0.360686      -0.383547       -0.210303   \n",
              "3 -0.893512  1.290845 -0.388556      -0.352867       -0.210303   \n",
              "4 -0.202257  1.290845 -0.043099      -0.152206       -0.210303   \n",
              "\n",
              "   oldbalanceDest  newbalanceDest  \n",
              "0       -0.180690       -0.247872  \n",
              "1       -0.228227       -0.313724  \n",
              "2        2.831732        2.492628  \n",
              "3       -0.228227       -0.313724  \n",
              "4       -0.228227       -0.313724  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-65ed0417-7928-41fe-a520-29ee44d97f5b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hours</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.465346</td>\n",
              "      <td>-0.738067</td>\n",
              "      <td>-0.392805</td>\n",
              "      <td>-0.355335</td>\n",
              "      <td>-0.210303</td>\n",
              "      <td>-0.180690</td>\n",
              "      <td>-0.247872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.510404</td>\n",
              "      <td>1.290845</td>\n",
              "      <td>3.443757</td>\n",
              "      <td>1.873162</td>\n",
              "      <td>-0.210303</td>\n",
              "      <td>-0.228227</td>\n",
              "      <td>-0.313724</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.741770</td>\n",
              "      <td>-0.738067</td>\n",
              "      <td>-0.360686</td>\n",
              "      <td>-0.383547</td>\n",
              "      <td>-0.210303</td>\n",
              "      <td>2.831732</td>\n",
              "      <td>2.492628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.893512</td>\n",
              "      <td>1.290845</td>\n",
              "      <td>-0.388556</td>\n",
              "      <td>-0.352867</td>\n",
              "      <td>-0.210303</td>\n",
              "      <td>-0.228227</td>\n",
              "      <td>-0.313724</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.202257</td>\n",
              "      <td>1.290845</td>\n",
              "      <td>-0.043099</td>\n",
              "      <td>-0.152206</td>\n",
              "      <td>-0.210303</td>\n",
              "      <td>-0.228227</td>\n",
              "      <td>-0.313724</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65ed0417-7928-41fe-a520-29ee44d97f5b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-65ed0417-7928-41fe-a520-29ee44d97f5b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-65ed0417-7928-41fe-a520-29ee44d97f5b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-368fe7c2-aeed-4ace-b53a-e8d8d425bc97\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-368fe7c2-aeed-4ace-b53a-e8d8d425bc97')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-368fe7c2-aeed-4ace-b53a-e8d8d425bc97 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "normalized_df",
              "summary": "{\n  \"name\": \"normalized_df\",\n  \"rows\": 13140,\n  \"fields\": [\n    {\n      \"column\": \"hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000380539224218,\n        \"min\": -1.5796076218981832,\n        \"max\": 2.24808579861631,\n        \"num_unique_values\": 743,\n        \"samples\": [\n          2.196499633919349,\n          2.1294376198133,\n          1.2163625046770936\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000380539224218,\n        \"min\": -1.4143706754487753,\n        \"max\": 1.2908448522654759,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.2908448522654759,\n          -0.06176291159164972,\n          0.6145409703369131\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000380539224218,\n        \"min\": -0.4413744964305261,\n        \"max\": 16.167170283736333,\n        \"num_unique_values\": 10370,\n        \"samples\": [\n          -0.2984656258005616,\n          -0.23016920320272627,\n          -0.43471764329838103\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceOrg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000380539224218,\n        \"min\": -0.3835470751754386,\n        \"max\": 17.877100204660334,\n        \"num_unique_values\": 8176,\n        \"samples\": [\n          -0.36005784909198474,\n          -0.2977904202374392,\n          -0.35744127801181524\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceOrig\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000380539224216,\n        \"min\": -0.21030265313743862,\n        \"max\": 19.693915333981693,\n        \"num_unique_values\": 2982,\n        \"samples\": [\n          0.12777757408766552,\n          -0.03725508931599553,\n          2.085269085434782\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000380539224216,\n        \"min\": -0.22822744600854508,\n        \"max\": 64.56530892208663,\n        \"num_unique_values\": 6078,\n        \"samples\": [\n          -0.13607924456013357,\n          -0.21114484566400368,\n          0.32211630358337934\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"newbalanceDest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000380539224216,\n        \"min\": -0.31372378792709205,\n        \"max\": 58.42926078786795,\n        \"num_unique_values\": 7314,\n        \"samples\": [\n          0.26490006133967997,\n          0.37862550087033287,\n          2.3018435630887915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Feature Engineering"
      ],
      "metadata": {
        "id": "1IPeYDU9mY2L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking for multicollinearity among variables using VIF\n",
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "\n",
        "vif_train = pd.DataFrame()\n",
        "vif_train['vif'] = [variance_inflation_factor(normalized_df, i) for i in range(normalized_df.shape[1])]\n",
        "vif_train['Features'] = X_train.columns"
      ],
      "metadata": {
        "id": "lJwyydD9mYYR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vif_train"
      ],
      "metadata": {
        "id": "HbJ4uVOWlFk-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "70d9b0fb-310d-496c-bec0-154b372772ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         vif        Features\n",
              "0   1.034112           hours\n",
              "1   1.246507            type\n",
              "2  18.739923          amount\n",
              "3  47.931290   oldbalanceOrg\n",
              "4  27.461409  newbalanceOrig\n",
              "5  15.614237  oldbalanceDest\n",
              "6  17.513039  newbalanceDest"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7bc077c2-edbc-40dc-bc40-f701712d6a2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vif</th>\n",
              "      <th>Features</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.034112</td>\n",
              "      <td>hours</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.246507</td>\n",
              "      <td>type</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>18.739923</td>\n",
              "      <td>amount</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>47.931290</td>\n",
              "      <td>oldbalanceOrg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>27.461409</td>\n",
              "      <td>newbalanceOrig</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>15.614237</td>\n",
              "      <td>oldbalanceDest</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>17.513039</td>\n",
              "      <td>newbalanceDest</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7bc077c2-edbc-40dc-bc40-f701712d6a2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7bc077c2-edbc-40dc-bc40-f701712d6a2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7bc077c2-edbc-40dc-bc40-f701712d6a2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-25bd2168-1ab1-455e-bad4-dfa25c22b029\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25bd2168-1ab1-455e-bad4-dfa25c22b029')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-25bd2168-1ab1-455e-bad4-dfa25c22b029 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_01e79a3a-2cf2-4042-a142-9fd5197f949d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('vif_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_01e79a3a-2cf2-4042-a142-9fd5197f949d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('vif_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "vif_train",
              "summary": "{\n  \"name\": \"vif_train\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"vif\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.117314519863786,\n        \"min\": 1.0341122430810195,\n        \"max\": 47.93128975619048,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0341122430810195,\n          1.2465074661285833,\n          15.614236675848934\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Features\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"hours\",\n          \"type\",\n          \"oldbalanceDest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Fixing multicollinearity by using PCA\n",
        "from sklearn.decomposition import PCA\n",
        "pca = PCA(n_components=7)\n",
        "\n",
        "normalized_df_pca = pca.fit_transform(normalized_df)\n",
        "normalized_df_pca = pd.DataFrame(normalized_df_pca, columns=normalized_df.columns)\n",
        "normalized_df_pca.shape"
      ],
      "metadata": {
        "id": "BM69FOwU4uy1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b105e13d-d720-4999-e3b3-ad95acff62f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13140, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for correlation\n",
        "import seaborn as sns\n",
        "sns.heatmap(normalized_df_pca.corr(), annot=True);"
      ],
      "metadata": {
        "id": "cL0ABTdfzjTC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "outputId": "6aff09fa-356f-4e5b-8342-48f6d7f1321d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "normalized_df_pca.shape"
      ],
      "metadata": {
        "id": "fRDGKlJ8rqMP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b497939a-58a8-42b4-b130-d06b9d677722"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13140, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc\n",
        "\n",
        "dt_model = DecisionTreeClassifier(random_state=42,\n",
        "                                  max_depth = 15)\n",
        "\n",
        "dt_model = dt_model.fit(normalized_df_pca, y_train)\n",
        "\n",
        "#testing the model\n",
        "y_pred = dt_model.predict(X_test)\n",
        "accuracy_score(y_test, y_pred)\n",
        "\n",
        "# Convert string labels to numeric\n",
        "y_test_numeric = [1 if label == 'Fraud' else 0 for label in y_test]\n",
        "y_pred_numeric = [1 if label == 'Fraud' else 0 for label in y_pred]\n",
        "\n",
        "# Confusion matrix\n",
        "confusion_matrix(y_test_numeric, y_pred_numeric)\n",
        "\n",
        "# Classification report\n",
        "print(classification_report(y_test_numeric, y_pred_numeric))\n",
        "#ROC score\n",
        "fpr, tpr, thresholds = roc_curve(y_test_numeric, y_pred_numeric)\n",
        "roc_auc = auc(fpr, tpr)"
      ],
      "metadata": {
        "id": "BhQbiaNoBDxS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e6c394f6-04d5-44b9-aae4-a027ff7ddadc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.84      0.72      1637\n",
            "           1       0.76      0.49      0.59      1649\n",
            "\n",
            "    accuracy                           0.67      3286\n",
            "   macro avg       0.69      0.67      0.65      3286\n",
            "weighted avg       0.69      0.67      0.65      3286\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#confusion matrix\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=dt_model.classes_)\n",
        "disp.plot()\n",
        "plt.title('Confusion Matrix Decision Tree')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "-Lm1gf9uYgRd",
        "outputId": "6afce191-dc12-412c-a5a0-5d5e01c58481"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_model = RandomForestClassifier(random_state=42,\n",
        "                                  criterion = 'gini',\n",
        "                                  max_depth = 15,\n",
        "                                  max_features = 'sqrt')\n",
        "\n",
        "rf_model = rf_model.fit(normalized_df_pca, y_train)\n",
        "\n",
        "#testing the model\n",
        "y_pred1 = rf_model.predict(X_test)\n",
        "accuracy_score(y_test, y_pred1)\n",
        "\n",
        "#Converting to numerical values\n",
        "y_test_num = [1 if label == 'Fraud' else 0 for label in y_test]\n",
        "y_pred_num1 = [1 if label == 'Fraud' else 0 for label in y_pred1]\n",
        "\n",
        "# Confusion matrix\n",
        "confusion_matrix(y_test_num, y_pred_num1)\n",
        "\n",
        "# Classification report\n",
        "print(classification_report(y_test_num, y_pred_num1))\n",
        "#ROC score\n",
        "fpr, tpr, thresholds = roc_curve(y_test_num, y_pred_num1)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "\n",
        "print(\"AUC:\", roc_auc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-gyu4Y4DOkpJ",
        "outputId": "8311804e-db4e-43d1-8664-985fd61893d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.50      1.00      0.66      1637\n",
            "           1       0.00      0.00      0.00      1649\n",
            "\n",
            "    accuracy                           0.50      3286\n",
            "   macro avg       0.25      0.50      0.33      3286\n",
            "weighted avg       0.25      0.50      0.33      3286\n",
            "\n",
            "AUC: 0.49969456322541234\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#confusion matrix\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "cm = confusion_matrix(y_test, y_pred1)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=dt_model.classes_)\n",
        "disp.plot()\n",
        "plt.title('Confusion Matrix RandomForest')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "YbymgyAMUixa",
        "outputId": "ecb7dab8-5d9a-401b-cddc-22ea381d5382"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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SEREVEFx2b1ueidEKpVK8trExAQeHh4IDw9Hly5djBYYERER0cuiV0JUUFCAoUOHwtvbG1WrVi2rmIiIiIheKr0mVZuamqJLly58qj0REdGrRjDSVknpvcqscePGuHr1alnEQkRERGWkaA6RoVtlpXdC9Mknn+DDDz/Ezp07ce/ePWRmZko2IiIioldNqecQhYeHY/LkyejevTsA4O2335Y8wkMQBCgUChQUFBg/SiIiIjJcJe7hMVSpE6LZs2fj/fffx4EDB8oyHiIiIioLvA+RTqVOiASh8F1o3759mQVDREREVB70Wnav6yn3REREVHHxxoy66ZUQNWjQ4LlJUVpamkEBERERURngkJlOeiVEs2fPLnanaiIiIqJXnV4JUWBgIBwdHcsqFiIiIiojHDLTrdQJEecPERERvcI4ZKaT3qvMiIiI6BXEhEinUidEWq22LOMgIiIiKjd6zSEiIiKiVxPnEOnGhIiIiEgOOGSmk94PdyUiIiKqbNhDREREJAfsIdKJCREREZEMcA6RbhwyIyIiItljDxEREZEccMhMJyZEREREMsAhM904ZEZERESyxx4iIiIiOeCQmU7sISIiIpIDwUibnu7cuYOBAweiWrVqsLKygre3N06fPv1PWIKA0NBQODs7w8rKCn5+frh06ZKkjbS0NAQFBUGpVMLe3h7Dhw9HVlaW/sHowISIiIhIBhRG2vTx4MEDtG7dGlWqVMHu3bvxxx9/YPHixahatapYZ+HChVixYgUiIyNx4sQJ2NjYwN/fH9nZ2WKdoKAgJCQkIDo6Gjt37sThw4cxatSoF3sjnoFDZkRERFQmFixYABcXF6xbt04sc3d3F/8tCAKWLVuGGTNmoHfv3gCADRs2wMnJCdu3b0dgYCASExOxZ88enDp1Cj4+PgCAlStXonv37vj000+h0WiMEit7iIiIiOTAiENmmZmZki0nJ6fEU/7000/w8fHBv/71Lzg6OuK1117DF198Ie6/du0akpOT4efnJ5apVCq0bNkSsbGxAIDY2FjY29uLyRAA+Pn5wcTEBCdOnDD8ffkfJkREREQyULTs3tANAFxcXKBSqcQtIiKixHNevXoVa9asQf369bF371588MEHGDduHNavXw8ASE5OBgA4OTlJjnNychL3JScnw9HRUbLfzMwMDg4OYh1j4JAZERER6eXWrVtQKpXi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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#SVM model\n",
        "from sklearn.svm import SVC\n",
        "svm_model = SVC(kernel='linear', random_state=42)\n",
        "\n",
        "#Building model\n",
        "svm_model = svm_model.fit(normalized_df_pca, y_train)\n",
        "\n",
        "#testing model\n",
        "y_pred2 = svm_model.predict(X_test)\n",
        "accuracy_score(y_test, y_pred2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cX90o6lUcElN",
        "outputId": "cd19bafe-c79c-433b-e876-d6be39756b77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6503347534996957"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_test, y_pred2)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=dt_model.classes_)\n",
        "disp.plot()\n",
        "plt.title('Confusion Matrix SVM')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Igs4Wz4SdoJL",
        "outputId": "70cbe24d-a7fe-48c4-cec4-bc84cb6a0ff6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hyper-parameter tuning of model"
      ],
      "metadata": {
        "id": "hhFM_VmINFkE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Hyper-parameter tuning with gridsearch algorithm\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "rf_model = RandomForestClassifier(random_state=42)\n",
        "parameters = {\n",
        "    'max_depth': [10, 5, 15, 3],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'criterion': ['gini', 'entropy'],\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'max_features': ['auto', 'sqrt', 'log2'],\n",
        "    'random_state': [42]\n",
        "}\n",
        "\n",
        "hyper = GridSearchCV(rf_model, parameters, cv=5)\n",
        "hyper.fit(normalized_df_pca, y_train)"
      ],
      "metadata": {
        "id": "xNEKg9CsIzH5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "1525a1fe-0e89-418b-fb2b-efc5d90f3167"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n",
              "             param_grid={'criterion': ['gini', 'entropy'],\n",
              "                         'max_depth': [10, 5, 15, 3],\n",
              "                         'max_features': ['auto', 'sqrt', 'log2'],\n",
              "                         'min_samples_leaf': [1, 2, 4],\n",
              "                         'min_samples_split': [2, 5, 10],\n",
              "                         'n_estimators': [100, 200, 300],\n",
              "                         'random_state': [42]})"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n",
              "             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
              "                         &#x27;max_depth&#x27;: [10, 5, 15, 3],\n",
              "                         &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200, 300],\n",
              "                         &#x27;random_state&#x27;: [42]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n",
              "             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
              "                         &#x27;max_depth&#x27;: [10, 5, 15, 3],\n",
              "                         &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200, 300],\n",
              "                         &#x27;random_state&#x27;: [42]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Best fit parameters\n",
        "hyper.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4T3iS_o0JYpG",
        "outputId": "8bd3f3b7-a654-4039-9254-df96dae2bd87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'criterion': 'gini',\n",
              " 'max_depth': 15,\n",
              " 'max_features': 'sqrt',\n",
              " 'min_samples_leaf': 1,\n",
              " 'min_samples_split': 5,\n",
              " 'n_estimators': 200,\n",
              " 'random_state': 42}"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hyper-parameter tuning with gridsearch algorithm for DecisionTreeClassifier\n",
        "dt_model = DecisionTreeClassifier(random_state=42)  # Assuming dt_model is already defined\n",
        "\n",
        "# Parameters specific to DecisionTreeClassifier\n",
        "parameters_dt = {\n",
        "    'max_depth': [10, 5, 15, 3],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'criterion': ['gini', 'entropy'],\n",
        "    'max_features': ['auto', 'sqrt', 'log2'],\n",
        "    'random_state': [42]\n",
        "}\n",
        "\n",
        "hyper = GridSearchCV(dt_model, parameters_dt, cv=5)  # Use parameters_dt\n",
        "hyper2 = hyper.fit(normalized_df_pca, y_train)"
      ],
      "metadata": {
        "id": "IyKPK3FUJaSl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hyper2.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ngDwOVOFJxDI",
        "outputId": "eef6ee0d-7c21-4fbd-a0bf-ba4ec0a41262"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'criterion': 'gini',\n",
              " 'max_depth': 15,\n",
              " 'max_features': 'sqrt',\n",
              " 'min_samples_leaf': 1,\n",
              " 'min_samples_split': 2,\n",
              " 'random_state': 42}"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    }
  ]
}